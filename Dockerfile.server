ARG user=joplin

# https://versatile.nl/blog/deploying-lerna-web-apps-with-docker
# https://docs.docker.com/develop/develop-images/multistage-build/

##########################################################################################
# builder image
# Builds joplin server in /home/$user 
########################################################################################## 
FROM node:16-bullseye as builder

RUN apt-get update \
    && apt-get install -y \
    python \
    && rm -rf /var/lib/apt/lists/*

RUN echo "Node: $(node --version)"
RUN echo "Npm: $(npm --version)"

ARG user=joplin

RUN useradd --create-home --shell /bin/bash $user
USER $user
WORKDIR /home/$user

ENV NODE_ENV development

# Install the root scripts but don't run postinstall (which would bootstrap
# and build TypeScript files, but we don't have the TypeScript files at
# this point)

COPY --chown=$user:$user package*.json ./
RUN npm install --ignore-scripts

# To take advantage of the Docker cache, we first copy all the package.json
# and package-lock.json files, as they rarely change, and then bootstrap
# all the packages.
#
# Note that bootstrapping the packages will run all the postinstall
# scripts, which means that for packages that have such scripts, we need to
# copy all the files.
#
# We can't run boostrap with "--ignore-scripts" because that would
# prevent certain sub-packages, such as sqlite3, from being built

COPY --chown=$user:$user packages/fork-sax/package*.json ./packages/fork-sax/
COPY --chown=$user:$user packages/renderer/package*.json ./packages/renderer/
COPY --chown=$user:$user packages/tools/package*.json ./packages/tools/
COPY --chown=$user:$user packages/lib/package*.json ./packages/lib/
COPY --chown=$user:$user lerna.json .
COPY --chown=$user:$user tsconfig.json .

# The following have postinstall scripts so we need to copy all the files.
# Since they should rarely change this is not an issue

COPY --chown=$user:$user packages/turndown ./packages/turndown
COPY --chown=$user:$user packages/turndown-plugin-gfm ./packages/turndown-plugin-gfm
COPY --chown=$user:$user packages/fork-htmlparser2 ./packages/fork-htmlparser2
COPY --chown=$user:$user packages/htmlpack ./packages/htmlpack

# Then bootstrap only, without compiling the TypeScript files

RUN npm run bootstrap

# We have a separate step for the server files because they are more likely to
# change.

COPY --chown=$user:$user packages/server/package*.json ./packages/server/
RUN npm run bootstrapServerOnly

# Now copy the source files. Put lib and server last as they are more likely to change.

COPY --chown=$user:$user packages/fork-sax ./packages/fork-sax
COPY --chown=$user:$user packages/renderer ./packages/renderer
COPY --chown=$user:$user packages/tools ./packages/tools
COPY --chown=$user:$user packages/lib ./packages/lib
COPY --chown=$user:$user packages/server ./packages/server

# Finally build everything, in particular the TypeScript files.

RUN npm run build

##########################################################################################
# joplin-server-dev image, uses builder as base
########################################################################################## 
From builder as joplin-server-dev

ARG user
USER $user:$user
WORKDIR /home/$user

RUN mkdir /home/$user/logs

ENV RUNNING_IN_DOCKER=1
ENV NODE_ENV development
EXPOSE ${APP_PORT}

CMD [ "npm", "--prefix", "packages/server", "start" ]

# Build-time metadata
# https://github.com/opencontainers/image-spec/blob/master/annotations.md
ARG BUILD_DATE
ARG REVISION
ARG VERSION
LABEL org.opencontainers.image.created="$BUILD_DATE" \
      org.opencontainers.image.title="Joplin Server DEV" \
      org.opencontainers.image.description="Docker image for development Joplin Server" \
      org.opencontainers.image.url="https://joplinapp.org/" \
      org.opencontainers.image.revision="$REVISION" \
      org.opencontainers.image.source="https://github.com/laurent22/joplin.git" \
      org.opencontainers.image.version="${VERSION}"

##########################################################################################
# small-image-builder, uses builder as base
# Constructs a smaller directory structure in /tmp/home/$user
########################################################################################## 
from builder as small-image-builder

ARG user

# Now prepair a smaller joplin server installation in /home/$user
USER $user
RUN mkdir -p /tmp/home/$user && \
    cp -r /home/joplin/packages/server/* /tmp/home/$user/ 

USER $user:$user
WORKDIR /tmp/home/$user
RUN npm install --omit dev

# remove all generated .test.js and .test.js.map files, which are not needed

RUN find dist -name "*.test.js*" -type f -exec rm {} \;


##########################################################################################
# joplin-server image, uses node:16-bullseye-slima as base
# and copies the required files from small-image-builder
########################################################################################## 
FROM node:16-bullseye-slim as joplin-server

# create the user account and required folders
ARG user
RUN useradd --create-home --shell /bin/bash $user && \
    mkdir -p /home/$user/logs && \
    mkdir -p /home/$user/src/views && \
    chown -R $user:$user /home/$user

# switch to user $user
USER $user:$user
WORKDIR /home/$user

# copy only all required files from the 'builder' image
COPY --from=small-image-builder /tmp/home/$user/dist /home/$user/dist
COPY --from=small-image-builder /tmp/home/$user/node_modules /home/$user/node_modules
COPY --from=small-image-builder /tmp/home/$user/public /home/$user/public
COPY --from=small-image-builder /tmp/home/$user/stripeConfig.json /home/$user/stripeConfig.json
COPY --from=small-image-builder /tmp/home/$user/src/views /home/$user/src/views

# set some environment variables
ENV RUNNING_IN_DOCKER=1
ENV NODE_ENV=production

# expose the application port
EXPOSE ${APP_PORT}

# start the node server directly from dist/app.js
CMD [ "node", "dist/app.js" ]

# Build-time metadata
# https://github.com/opencontainers/image-spec/blob/master/annotations.md
ARG BUILD_DATE
ARG REVISION
ARG VERSION
LABEL org.opencontainers.image.created="$BUILD_DATE" \
      org.opencontainers.image.title="Joplin Server" \
      org.opencontainers.image.description="Docker image for Joplin Server" \
      org.opencontainers.image.url="https://joplinapp.org/" \
      org.opencontainers.image.revision="$REVISION" \
      org.opencontainers.image.source="https://github.com/laurent22/joplin.git" \
      org.opencontainers.image.version="${VERSION}"
